What we want to do now is implement an RPython VM for a very small OO
language (e.g. a mini JavaScript / Python). The crucial thing is that we
need to be able to arbitrarily read/write slots so that we do things like:

  x = <new object>
  x.y = 0
  x.y = x.y + 1
  x.z = 2

That means that objects have to have some sort of hashmap internally to map
names -> values.

Step 1 is thus just to write a simple interpreter for the above (with, at
least, while loops as well!).

Step 2 is to look at the logs and realise that we spend huge chunks of time
looking things up in a hashmap. What we then want to do is use "Self style
maps" [1, 2, 3, 4] to optimise things.


Laurie

[1] https://dl.acm.org/doi/pdf/10.1145/74878.74884
[2] https://www.pypy.org/posts/2010/11/efficiently-implementing-python-objects-3838329944323946932.html
[3] http://morepypy.blogspot.com/2011/03/controlling-tracing-of-interpreter-with_21.html
[4] https://github.com/ltratt/converge/blob/master/vm/Builtins.py#L100